{
  "openapi": "3.0.0",
  "paths": {
    "/ens/v1/siwe/request-challenge": {
      "post": {
        "operationId": "SiweChallengeController_requestChallenge",
        "summary": "Request a challenge",
        "description": "Request a challenge.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiweRequestChallengeApiRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The challenge was requested successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiweRequestChallengeApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Siwe"
        ]
      }
    },
    "/ens/v1/siwe/verify-message": {
      "post": {
        "operationId": "SiweVerifyController_verify",
        "summary": "Verify a message",
        "description": "Verify a message.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiweVerifyMessageApiRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The message was verified successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiweVerifyMessageApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Siwe"
        ]
      }
    },
    "/ens/v1/subdomain/accept": {
      "post": {
        "operationId": "SubdomainWriteController_accept",
        "summary": "Accept Subname",
        "description": "Accept a reserved Subname.",
        "parameters": [
          {
            "name": "x-signature",
            "in": "header",
            "description": "The signature.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-message",
            "in": "header",
            "description": "The Message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-address",
            "in": "header",
            "description": "The Address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "description": "The Api Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubdomainAcceptApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The Subname was claimed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainAcceptApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/reserve": {
      "post": {
        "operationId": "SubdomainWriteController_apiReserve",
        "summary": "Reserve Subname",
        "description": "Reserve Subname to be claimed later.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "The Api Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubdomainReserveApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The Subname was reserved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainReserveApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/add": {
      "post": {
        "operationId": "SubdomainWriteController_add",
        "summary": "Add Subname",
        "description": "Add a new subname",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "The Api Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-signature",
            "in": "header",
            "description": "The signature.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-message",
            "in": "header",
            "description": "The Message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-address",
            "in": "header",
            "description": "The Address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubdomainAddApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The Subname was added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainAddApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/update": {
      "post": {
        "operationId": "SubdomainWriteController_update",
        "summary": "Update Subname",
        "description": "Update the specified subname's data",
        "parameters": [
          {
            "name": "x-signature",
            "in": "header",
            "description": "The signature.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-message",
            "in": "header",
            "description": "The Message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-address",
            "in": "header",
            "description": "The Address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubdomainUpdateApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The Subname was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainUpdateApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/revoke": {
      "post": {
        "operationId": "SubdomainWriteController_revoke",
        "summary": "Revoke Subname",
        "description": "Revoke the specified subname",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "The Api Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubdomainRevokeApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The Subname was revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainRevokeApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/username": {
      "get": {
        "operationId": "SubdomainReadController_findByDomainNameAndNameAndChainId",
        "summary": "Get by Username and ENS Domain",
        "description": "Retrieves subname details based on the specified ENS domain, username, and chainId",
        "parameters": [
          {
            "name": "ensDomain",
            "required": true,
            "in": "query",
            "description": "The ENS domain",
            "example": "jan.eth",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The subname was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/subname": {
      "get": {
        "operationId": "SubdomainReadController_findByFullDomainAndChainId",
        "summary": "Get by Subname",
        "description": "Retrieves subname details based on the specified subname and chainId",
        "parameters": [
          {
            "name": "subname",
            "required": true,
            "in": "query",
            "description": "The subname",
            "example": "user.jan.eth",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The Subname was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/ens-domain": {
      "get": {
        "operationId": "SubdomainReadController_findAllByDomainNameAndChainId",
        "summary": "Get all by ENS Domain",
        "description": "Retrieves all subnames associated with the provided ens domain",
        "parameters": [
          {
            "name": "ensDomain",
            "required": true,
            "in": "query",
            "description": "The ENS domain",
            "example": "jan.eth",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number (defaults to 1)",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of items per page (defaults to 20)",
            "example": 20,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isClaimed",
            "required": false,
            "in": "query",
            "description": "if true, will return claimed subdomain, if false, will return unclaimed subdomain, if not provided, will return all subdomains",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The Subnames were fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/address": {
      "get": {
        "operationId": "SubdomainReadController_findAllByAddress",
        "summary": "Get all by Address",
        "description": "Retrieves all subnames associated with an address",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address of the subdomain",
            "example": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "coinType",
            "required": false,
            "in": "query",
            "description": "The coin type of the address",
            "example": 60,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isClaimed",
            "required": false,
            "in": "query",
            "description": "if true, will return claimed subdomain, if false, will return unclaimed subdomain, if not provided, will return all subdomains",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ensDomains",
            "required": false,
            "in": "query",
            "description": "Array of ensDomains to filter the subnames by",
            "example": [
              "jan.eth"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The Subname was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/invitations": {
      "get": {
        "operationId": "SubdomainReadController_getInvitations",
        "summary": "Get Subnames Reserved to an Address",
        "description": "Retrieves all subnames reserved to an address",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address of the subdomain",
            "example": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "coinType",
            "required": false,
            "in": "query",
            "description": "The coin type of the address",
            "example": 60,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ensDomains",
            "required": false,
            "in": "query",
            "description": "Array of ensDomains to filter the subnames by",
            "example": [
              "jan.eth"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The Subname was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/records": {
      "get": {
        "operationId": "SubdomainReadController_getSubdomainRecords",
        "summary": "Get Subnames and ENS Records",
        "description": "Retrieves all records associated with a subname",
        "parameters": [
          {
            "name": "fullName",
            "required": true,
            "in": "query",
            "description": "The full name of the subdomain",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "The chain id",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "providerUrl",
            "required": true,
            "in": "query",
            "description": "Provider URL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The Records were fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubdomainGetRecordsApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/subdomain/available": {
      "get": {
        "operationId": "SubdomainReadController_isUsernameAvailable",
        "summary": "Is Subname Available",
        "description": "Checks if a username is available for a given ENS domain",
        "parameters": [
          {
            "name": "subname",
            "required": true,
            "in": "query",
            "description": "The subname",
            "example": "user.jan.eth",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The response was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsUsernameAvailableApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Subname"
        ]
      }
    },
    "/ens/v1/primary-name/address": {
      "get": {
        "operationId": "PrimaryNameReadController_getPrimaryNameByAddress",
        "summary": "Get by Address",
        "description": "Retrieves primary name for a given address",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address of the primary name",
            "example": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The primary name was fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryNameApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Name"
        ]
      }
    },
    "/ens/v1/primary-name/set-primary-name": {
      "post": {
        "operationId": "PrimaryNameWriteController_setPrimaryName",
        "summary": "Set Primary Name",
        "description": "Set a Subname as Primary Name for an address.",
        "parameters": [
          {
            "name": "x-signature",
            "in": "header",
            "description": "The signature.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-message",
            "in": "header",
            "description": "The Message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-address",
            "in": "header",
            "description": "The Address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimaryNameAddApiRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "The primary name was set successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryNameAddApiResponseSuccessSwagger"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Name"
        ]
      }
    }
  },
  "info": {
    "title": "Title",
    "description": "description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Siwe",
      "description": ""
    },
    {
      "name": "Subdomain",
      "description": ""
    },
    {
      "name": "Primary Name",
      "description": ""
    }
  ],
  "servers": [
    {
      "url": "https://api.justaname.id"
    },
    {
      "url": "https://api-staging.justaname.id"
    },
    {
      "url": "http://localhost:8000"
    }
  ],
  "components": {
    "schemas": {
      "SiweRequestChallengeApiRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain name",
            "example": "test"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "origin": {
            "type": "string",
            "description": "Origin",
            "example": "http://localhost:3000"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": "11155111"
          },
          "ttl": {
            "type": "number",
            "description": "Time to Live (TTL) in milliseconds (ms), default is 2 minutes (2 * 60 * 1000 = 120000 ms)",
            "example": 120000,
            "default": 120000
          }
        },
        "required": [
          "domain",
          "address",
          "origin",
          "chainId"
        ]
      },
      "SiweRequestChallengeApiResponse": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "example": "domain wants you to sign in with your Ethereum account:\nAddress\n\nPlease sign this message to verify that you want to add/update your subdomain provided by justawallet to your account Address using JustAName\n\nURI: uri\nVersion: 1\nChain ID: ChainId\nNonce: nonce\nIssued At: Date\nExpiration Time: Date"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "SiweRequestChallengeApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiweRequestChallengeApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SiweRequestChallengeApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SiweRequestChallengeApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "SiweVerifyMessageApiRequest": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "example": "0x0a"
          },
          "message": {
            "type": "string",
            "example": "domain wants you to sign in with your Ethereum account:\nAddress\n\nPlease sign this message to verify that you want to add/update your subdomain provided by justawallet to your account Address using JustAName\n\nURI: uri\nVersion: 1\nChain ID: ChainId\nNonce: nonce\nIssued At: Date\nExpiration Time: Date"
          },
          "address": {
            "type": "string",
            "example": "0x1234567890123456789012345678901234567890"
          }
        },
        "required": [
          "signature",
          "message",
          "address"
        ]
      },
      "SiweVerifyMessageApiResponse": {
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "verified"
        ]
      },
      "SiweVerifyMessageApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiweVerifyMessageApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SiweVerifyMessageApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SiweVerifyMessageApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "EnsAddApiRequest": {
        "type": "object",
        "properties": {
          "ensDomain": {
            "type": "string"
          },
          "offchainResolverId": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          }
        },
        "required": [
          "ensDomain",
          "offchainResolverId",
          "workspaceId"
        ]
      },
      "EnsAddApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "EnsAddApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnsAddApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "EnsAddApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/EnsAddApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "UpdateUserChosenLimitApiRequest": {
        "type": "object",
        "properties": {
          "ensId": {
            "type": "string"
          },
          "userChosenLimit": {
            "type": "number"
          }
        },
        "required": [
          "ensId",
          "userChosenLimit"
        ]
      },
      "RemoveUserChosenLimitApiRequest": {
        "type": "object",
        "properties": {
          "ensId": {
            "type": "string"
          }
        },
        "required": [
          "ensId"
        ]
      },
      "EnsDeleteApiRequest": {
        "type": "object",
        "properties": {
          "ensId": {
            "type": "string"
          }
        },
        "required": [
          "ensId"
        ]
      },
      "UpdateIsBlockedApiRequest": {
        "type": "object",
        "properties": {
          "ens": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "isBlocked": {
            "type": "boolean"
          }
        },
        "required": [
          "ens",
          "chainId",
          "isBlocked"
        ]
      },
      "EnsApiResponse": {
        "type": "object",
        "properties": {
          "ensId": {
            "type": "string"
          },
          "domainName": {
            "type": "string"
          },
          "userChosenLimit": {
            "type": "number"
          }
        },
        "required": [
          "ensId",
          "domainName",
          "userChosenLimit"
        ]
      },
      "EnsApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnsApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "EnsApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/EnsApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "EnsGetExpiryApiRequest": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "names"
        ]
      },
      "OffchainResolverApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resolverAddress": {
            "type": "string"
          },
          "ensRegistryAddress": {
            "type": "string"
          },
          "nodeProvider": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "chainName": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "resolverAddress",
          "ensRegistryAddress",
          "nodeProvider",
          "chainId",
          "chainName",
          "environment"
        ]
      },
      "OffchainResolverApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OffchainResolverApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "OffchainResolverApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/OffchainResolverApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "OffchainResolverUpdateApiRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resolverAddress": {
            "type": "string"
          },
          "ensRegistryAddress": {
            "type": "string"
          },
          "nodeProvider": {
            "type": "string"
          },
          "environment": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "resolverAddress",
          "ensRegistryAddress",
          "nodeProvider",
          "environment"
        ]
      },
      "OffchainResolverUpdateApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resolverAddress": {
            "type": "string"
          },
          "ensRegistryAddress": {
            "type": "string"
          },
          "nodeProvider": {
            "type": "string"
          },
          "environment": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "resolverAddress",
          "ensRegistryAddress",
          "nodeProvider",
          "environment"
        ]
      },
      "OffchainResolverUpdateApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OffchainResolverUpdateApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "OffchainResolverUpdateApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/OffchainResolverUpdateApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "AddressEnsDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "coinType": {
            "type": "number"
          }
        },
        "required": [
          "address",
          "coinType"
        ]
      },
      "TextRecordDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "SubdomainAcceptApiRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "ensDomain": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressEnsDto"
            }
          },
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRecordDto"
            }
          },
          "contentHash": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "ensDomain",
          "chainId",
          "addresses",
          "text",
          "contentHash"
        ]
      },
      "Metadata": {
        "type": "object",
        "properties": {}
      },
      "SubdomainAcceptApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0x..."
          },
          "data": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "id",
          "data"
        ]
      },
      "SubdomainAcceptApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainAcceptApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainAcceptApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainAcceptApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "SubdomainReserveApiRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "ensDomain": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "ethAddress": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "ensDomain",
          "chainId",
          "ethAddress"
        ]
      },
      "SubdomainReserveApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "SubdomainReserveApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainReserveApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainReserveApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainReserveApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "SubdomainAddApiRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The name of the subdomain",
            "example": "dev"
          },
          "ensDomain": {
            "type": "string",
            "description": "The name of the ens domain",
            "example": "jan"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111
          },
          "addresses": {
            "description": "The addresses corresponding to the subdomain",
            "example": [
              {
                "address": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8",
                "coinType": 60
              },
              {
                "address": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
                "coinType": 0
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressEnsDto"
            }
          },
          "text": {
            "description": "The texts corresponding to the subdomain",
            "example": [
              {
                "key": "twitter.com",
                "value": "@justaname"
              },
              {
                "key": "youtube.com",
                "value": "justaname"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRecordDto"
            }
          },
          "contentHash": {
            "type": "string",
            "description": "The content hash of the subdomain",
            "example": "ipfs://QmRAQB6YaCyidP37UdDnjFY5vQuiBrcqdyoW1CuDgwxkD4"
          }
        },
        "required": [
          "username",
          "ensDomain",
          "chainId",
          "addresses",
          "text",
          "contentHash"
        ]
      },
      "SubdomainAddApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id"
          }
        },
        "required": [
          "id"
        ]
      },
      "SubdomainAddApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainAddApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainAddApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainAddApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "SubdomainUpdateApiRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The name of the ens domain",
            "example": "dev"
          },
          "ensDomain": {
            "type": "string",
            "description": "The name of the subdomain",
            "example": "jan"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111
          },
          "addresses": {
            "description": "The new addresses associated with the subdomain",
            "example": [
              {
                "address": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8",
                "coinType": 60
              },
              {
                "address": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
                "coinType": 0
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressEnsDto"
            }
          },
          "text": {
            "description": "The new texts of the subdomain",
            "example": [
              {
                "key": "twitter.com",
                "value": "@justaname"
              },
              {
                "key": "youtube.com",
                "value": "justaname"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRecordDto"
            }
          },
          "contentHash": {
            "type": "string",
            "description": "The new contentHash of the subdomain",
            "example": "ipfs://QmRAQB6YaCyidP37UdDnjFY5vQuiBrcqdyoW1CuDgwxkD4"
          }
        },
        "required": [
          "username",
          "ensDomain",
          "chainId",
          "addresses",
          "text",
          "contentHash"
        ]
      },
      "SubdomainUpdateApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id"
          },
          "data": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "id",
          "data"
        ]
      },
      "SubdomainUpdateApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainUpdateApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainUpdateApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainUpdateApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "SubdomainRevokeApiRequest": {
        "type": "object",
        "properties": {
          "ensDomain": {
            "type": "string",
            "description": "The name of the ens domain",
            "example": "jan"
          },
          "username": {
            "type": "string",
            "description": "The name of the subdomain",
            "example": "dev"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111
          }
        },
        "required": [
          "ensDomain",
          "username",
          "chainId"
        ]
      },
      "SubdomainRevokeApiResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string"
          }
        },
        "required": [
          "response"
        ]
      },
      "SubdomainRevokeApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainRevokeApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainRevokeApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainRevokeApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "MetadataApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contentHash": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "textRecords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subdomainId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "contentHash",
          "addresses",
          "textRecords",
          "subdomainId"
        ]
      },
      "SubdomainApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/MetadataApiResponse"
          },
          "ensId": {
            "type": "string"
          },
          "subname": {
            "type": "string"
          },
          "isClaimed": {
            "type": "boolean"
          },
          "claimedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "data",
          "ensId",
          "subname",
          "isClaimed",
          "claimedAt"
        ]
      },
      "SubdomainApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "PaginationApiResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "nextPage": {
            "type": "number"
          },
          "prevPage": {
            "type": "number"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "hasPrevPage": {
            "type": "boolean"
          }
        },
        "required": [
          "totalCount",
          "page",
          "limit",
          "totalPages",
          "nextPage",
          "prevPage",
          "hasNextPage",
          "hasPrevPage"
        ]
      },
      "SubdomainWithPaginationApiResponse": {
        "type": "object",
        "properties": {
          "subnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationApiResponse"
          }
        },
        "required": [
          "subnames",
          "pagination"
        ]
      },
      "SubdomainWithPaginationApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainWithPaginationApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainWithPaginationApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainWithPaginationApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "ContentHash": {
        "type": "object",
        "properties": {}
      },
      "SubdomainGetRecordsApiResponse": {
        "type": "object",
        "properties": {
          "resolverAddress": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "coins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contentHash": {
            "$ref": "#/components/schemas/ContentHash"
          },
          "isJAN": {
            "type": "boolean"
          }
        },
        "required": [
          "resolverAddress",
          "texts",
          "coins",
          "contentHash",
          "isJAN"
        ]
      },
      "SubdomainGetRecordsApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubdomainGetRecordsApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "SubdomainGetRecordsApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/SubdomainGetRecordsApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "IsUsernameAvailableApiResponse": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          }
        },
        "required": [
          "available"
        ]
      },
      "IsUsernameAvailableApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IsUsernameAvailableApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "IsUsernameAvailableApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/IsUsernameAvailableApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "PrimaryNameApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "nameHash": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "address",
          "nameHash",
          "chainId"
        ]
      },
      "PrimaryNameApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PrimaryNameApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "PrimaryNameApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/PrimaryNameApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      },
      "PrimaryNameAddApiRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The full name",
            "example": "ghadi.jan.eth"
          },
          "address": {
            "type": "string",
            "description": "The address of the primary name",
            "example": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111
          }
        },
        "required": [
          "name",
          "address",
          "chainId"
        ]
      },
      "PrimaryNameUpdateApiRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The full name",
            "example": "ghadi.jan.eth"
          },
          "address": {
            "type": "string",
            "description": "The address of the primary name",
            "example": "0xb965a5f3a0fC18D84E68883ccAd508445a7917A8"
          },
          "chainId": {
            "type": "number",
            "description": "Chain id, we only support Ethereum Mainnet and Sepolia Testnet (1 for mainnet, 11155111 for sepolia)",
            "example": 11155111
          }
        },
        "required": [
          "name",
          "address",
          "chainId"
        ]
      },
      "PrimaryNameAddApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id"
          }
        },
        "required": [
          "id"
        ]
      },
      "PrimaryNameAddApiResponseResultSwagger": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PrimaryNameAddApiResponse"
          },
          "error": {
            "type": "string",
            "description": "Null if no error occurred, otherwise the error message."
          }
        },
        "required": [
          "data",
          "error"
        ]
      },
      "PrimaryNameAddApiResponseSuccessSwagger": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 200,
            "description": "The status code of the response."
          },
          "result": {
            "$ref": "#/components/schemas/PrimaryNameAddApiResponseResultSwagger"
          }
        },
        "required": [
          "statusCode",
          "result"
        ]
      }
    }
  }
}